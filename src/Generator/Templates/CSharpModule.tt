<#@ template debug="true" language="C#" #>
<#@ output extension=".cs" #>
using System;
using System.Runtime.InteropServices;

namespace <#= SafeIdentifier(Library.Name) #>
{
<#
    GenerateDeclarations();
#>
}

<#+
public void GenerateDeclarations()
{
    PushIndent(DefaultIndent);

    bool NeedsNewline = false;

    // Generate all the enum declarations for the module.
    for(int i = 0; i < Module.Enums.Count; ++i)
    {
        var E = Module.Enums[i];
        if (E.Ignore) continue;
   
        GenerateEnum(E);
        NeedsNewline = true;
        if (i < Module.Enums.Count - 1)
           WriteLine("");
    }

    if (NeedsNewline)
        WriteLine("");

	NeedsNewline = false;

    // Generate all the typedef declarations for the module.
    for(int i = 0; i < Module.Typedefs.Count; ++i)
    {
        var T = Module.Typedefs[i];
        if (T.Ignore) continue;

        GenerateTypedef(T);
        NeedsNewline = true;
        if (i < Module.Typedefs.Count - 1)
           WriteLine("");
    }

    if (NeedsNewline)
        WriteLine("");

    NeedsNewline = false;

    // Generate all the struct/class declarations for the module.
    for(int i = 0; i < Module.Classes.Count; ++i)
    {
        var C = Module.Classes[i];
        if (C.Ignore) continue;

        GenerateClass(C);
        NeedsNewline = true;
        if (i < Module.Classes.Count - 1)
           WriteLine("");
    }

    if (NeedsNewline)
        WriteLine("");

    if (Module.HasFunctions)
    {
        WriteLine("public partial class " + SafeIdentifier(Library.Name));
        WriteLine("{");
        PushIndent(DefaultIndent);
    }

    // Generate all the function declarations for the module.
    foreach(var E in Module.Functions)
    {
        GenerateFunction(E);
    }

    if (Module.HasFunctions)
    {
        PopIndent();
        WriteLine("}");
    }

    PopIndent();
}
#>

<#+
public void GenerateDeclarationCommon(Declaration T)
{
    GenerateSummary(T.BriefComment);
    GenerateDebug(T);
}
#>

<#+
public void GenerateClass(Class C)
{
    if(C.Ignore) return;
    GenerateDeclarationCommon(C);

    if (C.IsUnion)
        WriteLine("[StructLayout(LayoutKind.Explicit)]");
    Write("public unsafe ");

    if (C.IsAbstract)
        Write("abstract ");

    Write("class {0}", SafeIdentifier(C.Name));

    if (C.HasBase)
        Write(" : {0}", SafeIdentifier(C.Bases[0].Class.Name));

    WriteLine(String.Empty);
    WriteLine("{");

	if (!C.IsOpaque)
	{
		PushIndent(DefaultIndent);
		foreach(var F in C.Fields)
		{
			GenerateDeclarationCommon(F);
			if (C.IsUnion)
				WriteLine("[FieldOffset({0})]", F.Offset);
			WriteLine("public {0} {1};", F.Type.ToCSharp(), SafeIdentifier(F.Name));
		}
		PopIndent();
	}

    WriteLine("}");
}
#>

<#+
public void GenerateTypedef(Typedef T)
{
    if(T.Ignore) return;
    GenerateDeclarationCommon(T);

	FunctionType func;

	if (T.Type.IsPointerToPrimitiveType(PrimitiveType.Void))
	{
		WriteLine("public class " + SafeIdentifier(T.Name) + @" { }");
		WriteLine("");
	}
	else if(T.Type.IsPointerTo<FunctionType>(out func))
	{
		WriteLine("public {0};",
		 string.Format(func.ToDelegateString(), SafeIdentifier(T.Name)));
	} 
}
#>

<#+
public void GenerateFunction(Function F)
{
    if(F.Ignore) return;
    GenerateDeclarationCommon(F);
#>
[DllImport("<#= SafeIdentifier(Library.Native) #>.dll")]
public unsafe static extern <#= F.ReturnType.ToCSharp() #> <#= SafeIdentifier(F.Name) #>(<#+
for(int i = 0; i < F.Parameters.Count; ++i)
{
    var P = F.Parameters[i];
    Write("{0} {1}", P.Type.ToCSharp(), SafeIdentifier(P.Name));
    if (i < F.Parameters.Count - 1)
       Write(", ");
}
#>);
<#+
WriteLine("");
}
#>

<#+
public void GenerateDebug(Declaration decl)
{
    if(Options.OutputDebug && !String.IsNullOrWhiteSpace(decl.DebugText))
        WriteLine("// DEBUG: " + decl.DebugText);
}
#>

<#+
public void GenerateSummary(string Comment)
{
    if(String.IsNullOrWhiteSpace(Comment))
        return;
#>
/// <summary>
/// <#= Comment #>
/// </summary>
<#+
}
#>

<#+
public void GenerateInlineSummary(string Comment)
{
    if(String.IsNullOrWhiteSpace(Comment))
        return;
#>
/// <summary> <#= Comment #> </summary>
<#+
}
#>

<#+
public void GenerateEnum(Enumeration E)
{
    if(E.Ignore) return;
    GenerateDeclarationCommon(E);

    if(E.Modifiers.HasFlag(Enumeration.EnumModifiers.Flags))
        WriteLine("[Flags]");
#>
public enum <#= SafeIdentifier(E.Name) #>
<#+
if(E.Type.Type != PrimitiveType.Int32)
    WriteLine(" : {0}", E.Type.Type.ConvertToTypeName());
WriteLine("{");

PushIndent(DefaultIndent);
for(int i = 0; i < E.Items.Count; ++i)
{
    var I = E.Items[i];
    GenerateInlineSummary(I.Comment);
    if (I.ExplicitValue)
        Write(String.Format("{0} = {1}", SafeIdentifier(I.Name), I.Value));
    else
        Write(String.Format("{0}", SafeIdentifier(I.Name)));

    if (i < E.Items.Count - 1)
        WriteLine(",");
}
PopIndent();
WriteLine("");
#>
}
<#+
}
#>