using System.Collections.Generic;
using System.IO;

namespace CppSharp.Generators
{
    public enum LanguageGeneratorKind
    {
        CPlusPlusCLI,
        CSharp,
    }

    /// <summary>
    /// Output generated by each backend generator.
    /// </summary>
    public struct GeneratorOutput
    {
        /// <summary>
        /// Translation unit associated with output.
        /// </summary>
        public TranslationUnit TranslationUnit;

        /// <summary>
        /// Text template with generated output.
        /// </summary>
        public TextTemplate Template;

        /// <summary>
        /// Output path of the generated output. 
        /// </summary>
        public string OutputPath;
    }

    public abstract class Generator
    {
        public Driver Driver { get; private set; }

        protected Generator(Driver driver)
        {
            Driver = driver;
        }

        public abstract bool Generate(TranslationUnit unit,
            List<GeneratorOutput> outputs);


        protected string GetOutputPath(TranslationUnit unit)
        {
            var file = unit.FileNameWithoutExtension;

            if (Driver.Options.GenerateName != null)
                file = Driver.Options.GenerateName(unit);

            var path = Path.Combine(Driver.Options.OutputDir, file);
            return Path.GetFullPath(path);
        }

        protected GeneratorOutput GenerateTemplateOutput(TextTemplate template)
        {
            var path = GetOutputPath(template.TranslationUnit)
                + "." + template.FileExtension;

            template.Generate();

            var output = new GeneratorOutput()
            {
                OutputPath = path,
                Template = template,
                TranslationUnit = template.TranslationUnit
            };

            return output;
        }
    }
}