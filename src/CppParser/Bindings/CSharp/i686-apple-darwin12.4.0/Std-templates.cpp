#include <string>

template class __declspec(dllexport) std::allocator<char>;
template class __declspec(dllexport) std::basic_string<char, std::char_traits<char>, std::allocator<char>>;
template class __declspec(dllexport) std::initializer_list<char>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::PreprocessedEntity*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::BlockContentComment*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Parameter*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Declaration*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::FunctionTemplateSpecialization*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::TemplateArgument>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Function*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Template*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::TypedefDecl*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::TypeAlias*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Variable*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Friend*>;
template class __declspec(dllexport) std::initializer_list<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, CppSharp::CppParser::AST::Declaration*>>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::BaseClassSpecifier*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Field*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Method*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::AccessSpecifierDecl*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::VTableComponent>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::VFTableInfo>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::LayoutField>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::LayoutBase>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Class*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Enumeration::Item*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Enumeration*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Namespace*>;
template class __declspec(dllexport) std::initializer_list<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::ClassTemplateSpecialization*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::Expression*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::VarTemplateSpecialization*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::MacroDefinition*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::TranslationUnit*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::InlineContentComment*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::BlockCommandComment::Argument>;
template class __declspec(dllexport) std::initializer_list<unsigned int>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::VerbatimBlockLineComment*>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::InlineCommandComment::Argument>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::AST::HTMLStartTagComment::Attribute>;
template class __declspec(dllexport) std::initializer_list<CppSharp::CppParser::ParserDiagnostic>;
template class __declspec(dllexport) std::__type_list<std::__align_type<unsigned short>, std::__type_list<std::__align_type<unsigned int>, std::__type_list<std::__align_type<unsigned long>, std::__type_list<std::__align_type<unsigned long long>, std::__type_list<std::__align_type<double>, std::__type_list<std::__align_type<long double>, std::__type_list<std::__align_type<std::__struct_double>, std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>>>>>>>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<unsigned int>, std::__type_list<std::__align_type<unsigned long>, std::__type_list<std::__align_type<unsigned long long>, std::__type_list<std::__align_type<double>, std::__type_list<std::__align_type<long double>, std::__type_list<std::__align_type<std::__struct_double>, std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>>>>>>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<unsigned long>, std::__type_list<std::__align_type<unsigned long long>, std::__type_list<std::__align_type<double>, std::__type_list<std::__align_type<long double>, std::__type_list<std::__align_type<std::__struct_double>, std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>>>>>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<unsigned long long>, std::__type_list<std::__align_type<double>, std::__type_list<std::__align_type<long double>, std::__type_list<std::__align_type<std::__struct_double>, std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>>>>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<double>, std::__type_list<std::__align_type<long double>, std::__type_list<std::__align_type<std::__struct_double>, std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>>>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<long double>, std::__type_list<std::__align_type<std::__struct_double>, std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<std::__struct_double>, std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<std::__struct_double4>, std::__type_list<std::__align_type<int*>, std::__nat>>;
template class __declspec(dllexport) std::__type_list<std::__align_type<int*>, std::__nat>;
template class __declspec(dllexport) std::__type_list<int, std::__type_list<long, std::__type_list<long long, std::__nat>>>;
template class __declspec(dllexport) std::__type_list<long, std::__type_list<long long, std::__nat>>;
template class __declspec(dllexport) std::__type_list<long long, std::__nat>;
template class __declspec(dllexport) std::__type_list<unsigned int, std::__type_list<unsigned long, std::__type_list<unsigned long long, std::__nat>>>;
template class __declspec(dllexport) std::__type_list<unsigned long, std::__type_list<unsigned long long, std::__nat>>;
template class __declspec(dllexport) std::__type_list<unsigned long long, std::__nat>;
template class __declspec(dllexport) std::__tuple_types<>;
template class __declspec(dllexport) std::allocator<wchar_t>;
template class __declspec(dllexport) std::allocator<char16_t>;
template class __declspec(dllexport) std::allocator<char32_t>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::PreprocessedEntity*, std::allocator<CppSharp::CppParser::AST::PreprocessedEntity*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::BlockContentComment*, std::allocator<CppSharp::CppParser::AST::BlockContentComment*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Parameter*, std::allocator<CppSharp::CppParser::AST::Parameter*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Declaration*, std::allocator<CppSharp::CppParser::AST::Declaration*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::FunctionTemplateSpecialization*, std::allocator<CppSharp::CppParser::AST::FunctionTemplateSpecialization*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::TemplateArgument, std::allocator<CppSharp::CppParser::AST::TemplateArgument>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Function*, std::allocator<CppSharp::CppParser::AST::Function*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Template*, std::allocator<CppSharp::CppParser::AST::Template*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::TypedefDecl*, std::allocator<CppSharp::CppParser::AST::TypedefDecl*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::TypeAlias*, std::allocator<CppSharp::CppParser::AST::TypeAlias*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Variable*, std::allocator<CppSharp::CppParser::AST::Variable*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Friend*, std::allocator<CppSharp::CppParser::AST::Friend*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::BaseClassSpecifier*, std::allocator<CppSharp::CppParser::AST::BaseClassSpecifier*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Field*, std::allocator<CppSharp::CppParser::AST::Field*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Method*, std::allocator<CppSharp::CppParser::AST::Method*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::AccessSpecifierDecl*, std::allocator<CppSharp::CppParser::AST::AccessSpecifierDecl*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::VTableComponent, std::allocator<CppSharp::CppParser::AST::VTableComponent>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::VFTableInfo, std::allocator<CppSharp::CppParser::AST::VFTableInfo>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::LayoutField, std::allocator<CppSharp::CppParser::AST::LayoutField>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::LayoutBase, std::allocator<CppSharp::CppParser::AST::LayoutBase>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Class*, std::allocator<CppSharp::CppParser::AST::Class*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Enumeration::Item*, std::allocator<CppSharp::CppParser::AST::Enumeration::Item*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Enumeration*, std::allocator<CppSharp::CppParser::AST::Enumeration*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Namespace*, std::allocator<CppSharp::CppParser::AST::Namespace*>&>;
template class __declspec(dllexport) std::__split_buffer<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::ClassTemplateSpecialization*, std::allocator<CppSharp::CppParser::AST::ClassTemplateSpecialization*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::Expression*, std::allocator<CppSharp::CppParser::AST::Expression*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::VarTemplateSpecialization*, std::allocator<CppSharp::CppParser::AST::VarTemplateSpecialization*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::MacroDefinition*, std::allocator<CppSharp::CppParser::AST::MacroDefinition*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::TranslationUnit*, std::allocator<CppSharp::CppParser::AST::TranslationUnit*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::InlineContentComment*, std::allocator<CppSharp::CppParser::AST::InlineContentComment*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::BlockCommandComment::Argument, std::allocator<CppSharp::CppParser::AST::BlockCommandComment::Argument>&>;
template class __declspec(dllexport) std::__split_buffer<unsigned int, std::allocator<unsigned int>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::VerbatimBlockLineComment*, std::allocator<CppSharp::CppParser::AST::VerbatimBlockLineComment*>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::InlineCommandComment::Argument, std::allocator<CppSharp::CppParser::AST::InlineCommandComment::Argument>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::AST::HTMLStartTagComment::Attribute, std::allocator<CppSharp::CppParser::AST::HTMLStartTagComment::Attribute>&>;
template class __declspec(dllexport) std::__split_buffer<CppSharp::CppParser::ParserDiagnostic, std::allocator<CppSharp::CppParser::ParserDiagnostic>&>;
template class __declspec(dllexport) std::placeholders::__ph<>;