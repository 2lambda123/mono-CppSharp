//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace Parser
    {
        public enum LanguageVersion
        {
            /// <summary>The C programming language.</summary>
            C = 0,
            /// <summary>The C++ programming language year 1998; supports deprecated constructs.</summary>
            CPlusPlus98 = 1,
            /// <summary>The C++ programming language year 2011.</summary>
            CPlusPlus11 = 2
        }

        public enum ParserDiagnosticLevel
        {
            Ignored = 0,
            Note = 1,
            Warning = 2,
            Error = 3,
            Fatal = 4
        }

        public enum ParserResultKind
        {
            Success = 0,
            Error = 1,
            FileNotFound = 2
        }

        public enum SourceLocationKind
        {
            Invalid = 0,
            Builtin = 1,
            CommandLine = 2,
            System = 3,
            User = 4
        }

        public unsafe abstract partial class AbstractModule : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 52)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr vfptr0;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModuleC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModuleC2ERKS1_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule14getIncludeDirsEj")]
                internal static extern global::System.IntPtr getIncludeDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule14addIncludeDirsEPKc")]
                internal static extern void addIncludeDirs_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule16clearIncludeDirsEv")]
                internal static extern void clearIncludeDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule14getLibraryDirsEj")]
                internal static extern global::System.IntPtr getLibraryDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule14addLibraryDirsEPKc")]
                internal static extern void addLibraryDirs_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule16clearLibraryDirsEv")]
                internal static extern void clearLibraryDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule10getDefinesEj")]
                internal static extern global::System.IntPtr getDefines_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule10addDefinesEPKc")]
                internal static extern void addDefines_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule12clearDefinesEv")]
                internal static extern void clearDefines_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule12getUndefinesEj")]
                internal static extern global::System.IntPtr getUndefines_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule12addUndefinesEPKc")]
                internal static extern void addUndefines_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule14clearUndefinesEv")]
                internal static extern void clearUndefines_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule19getIncludeDirsCountEv")]
                internal static extern uint getIncludeDirsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule19getLibraryDirsCountEv")]
                internal static extern uint getLibraryDirsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule15getDefinesCountEv")]
                internal static extern uint getDefinesCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser14AbstractModule17getUndefinesCountEv")]
                internal static extern uint getUndefinesCount_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, AbstractModule> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, AbstractModule>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static AbstractModule __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new AbstractModuleInternal(native.ToPointer(), skipVTables);
            }

            public static AbstractModule __CreateInstance(AbstractModule.Internal native, bool skipVTables = false)
            {
                return new AbstractModuleInternal(native, skipVTables);
            }

            protected AbstractModule(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
                if (skipVTables)
                    __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
                else
                    SetupVTables(true);
            }

            protected AbstractModule()
            {
                __Instance = Marshal.AllocHGlobal(52);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
                SetupVTables(GetType().FullName == "CppSharp.CppParser.dll.CppSharp.Parser.AbstractModule");
            }

            protected AbstractModule(CppSharp.Parser.AbstractModule _0)
            {
                __Instance = Marshal.AllocHGlobal(52);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
                SetupVTables(GetType().FullName == "CppSharp.CppParser.dll.CppSharp.Parser.AbstractModule");
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                CppSharp.Parser.AbstractModule __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public string getIncludeDirs(uint i)
            {
                var __ret = Internal.getIncludeDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addIncludeDirs(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addIncludeDirs_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearIncludeDirs()
            {
                Internal.clearIncludeDirs_0((__Instance + __PointerAdjustment));
            }

            public string getLibraryDirs(uint i)
            {
                var __ret = Internal.getLibraryDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addLibraryDirs(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addLibraryDirs_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearLibraryDirs()
            {
                Internal.clearLibraryDirs_0((__Instance + __PointerAdjustment));
            }

            public string getDefines(uint i)
            {
                var __ret = Internal.getDefines_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addDefines(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addDefines_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearDefines()
            {
                Internal.clearDefines_0((__Instance + __PointerAdjustment));
            }

            public string getUndefines(uint i)
            {
                var __ret = Internal.getUndefines_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addUndefines(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addUndefines_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearUndefines()
            {
                Internal.clearUndefines_0((__Instance + __PointerAdjustment));
            }

            public uint IncludeDirsCount
            {
                get
                {
                    var __ret = Internal.getIncludeDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint LibraryDirsCount
            {
                get
                {
                    var __ret = Internal.getLibraryDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint DefinesCount
            {
                get
                {
                    var __ret = Internal.getDefinesCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint UndefinesCount
            {
                get
                {
                    var __ret = Internal.getUndefinesCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            #region Virtual table interop

            // virtual ~AbstractModule() = 0
            private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

            private static void _dtor_0DelegateHook(global::System.IntPtr instance)
            {
                if (!NativeToManagedMap.ContainsKey(instance))
                    throw new global::System.Exception("No managed instance was found");

                var __target = (AbstractModule) NativeToManagedMap[instance];
                if (__target.__ownsNativeInstance)
                    __target.SetupVTables();
                __target.Dispose(false);
            }

            private static void*[] __ManagedVTables;
            private static void*[] __ManagedVTablesDtorOnly;
            private static void*[] _Thunks;

            private void SetupVTables(bool destructorOnly = false)
            {
                if (__OriginalVTables != null)
                    return;
                var native = (Internal*) __Instance.ToPointer();

                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

                if (_Thunks == null)
                {
                    _Thunks = new void*[1];
                    _dtor_0DelegateInstance += _dtor_0DelegateHook;
                    _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                }

                if (destructorOnly)
                {
                    if (__ManagedVTablesDtorOnly == null)
                    {
                        __ManagedVTablesDtorOnly = new void*[1];
                        var vtptr = Marshal.AllocHGlobal(4 * 4);
                        var vfptr0 = vtptr + 2 * 4;
                        __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                        *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                        *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                        *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                        *(void**)(vfptr0 + 4) = _Thunks[0];
                    }

                    native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
                }
                else
                {
                    if (__ManagedVTables == null)
                    {
                        __ManagedVTables = new void*[1];
                        var vtptr = Marshal.AllocHGlobal(4 * 4);
                        var vfptr0 = vtptr + 2 * 4;
                        __ManagedVTables[0] = vfptr0.ToPointer();
                        *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                        *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                        *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                        *(void**)(vfptr0 + 4) = _Thunks[0];
                    }

                    native->vfptr0 = new IntPtr(__ManagedVTables[0]);
                }
            }

            #endregion
        }

        public unsafe partial class ParserOptions : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 124)]
            public partial struct Internal
            {
                [FieldOffset(84)]
                public global::System.IntPtr ASTContext;

                [FieldOffset(88)]
                public int ToolSetToUse;

                [FieldOffset(104)]
                public CppSharp.Parser.AST.CppAbi Abi;

                [FieldOffset(108)]
                public byte NoStandardIncludes;

                [FieldOffset(109)]
                public byte NoBuiltinIncludes;

                [FieldOffset(110)]
                public byte MicrosoftMode;

                [FieldOffset(111)]
                public byte Verbose;

                [FieldOffset(112)]
                public CppSharp.Parser.LanguageVersion LanguageVersion;

                [FieldOffset(116)]
                public global::System.IntPtr TargetInfo;

                [FieldOffset(120)]
                public global::System.IntPtr Module;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptionsC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptionsC2ERKS1_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptionsD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions12getArgumentsEj")]
                internal static extern global::System.IntPtr getArguments_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions12addArgumentsEPKc")]
                internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions14clearArgumentsEv")]
                internal static extern void clearArguments_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions14getIncludeDirsEj")]
                internal static extern global::System.IntPtr getIncludeDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions14addIncludeDirsEPKc")]
                internal static extern void addIncludeDirs_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions16clearIncludeDirsEv")]
                internal static extern void clearIncludeDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions20getSystemIncludeDirsEj")]
                internal static extern global::System.IntPtr getSystemIncludeDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions20addSystemIncludeDirsEPKc")]
                internal static extern void addSystemIncludeDirs_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions22clearSystemIncludeDirsEv")]
                internal static extern void clearSystemIncludeDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions10getDefinesEj")]
                internal static extern global::System.IntPtr getDefines_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions10addDefinesEPKc")]
                internal static extern void addDefines_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions12clearDefinesEv")]
                internal static extern void clearDefines_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions12getUndefinesEj")]
                internal static extern global::System.IntPtr getUndefines_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions12addUndefinesEPKc")]
                internal static extern void addUndefines_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions14clearUndefinesEv")]
                internal static extern void clearUndefines_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions14getLibraryDirsEj")]
                internal static extern global::System.IntPtr getLibraryDirs_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions14addLibraryDirsEPKc")]
                internal static extern void addLibraryDirs_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions16clearLibraryDirsEv")]
                internal static extern void clearLibraryDirs_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions17getArgumentsCountEv")]
                internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions11getFileNameEv")]
                internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions11setFileNameEPKc")]
                internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions19getIncludeDirsCountEv")]
                internal static extern uint getIncludeDirsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions25getSystemIncludeDirsCountEv")]
                internal static extern uint getSystemIncludeDirsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions15getDefinesCountEv")]
                internal static extern uint getDefinesCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions17getUndefinesCountEv")]
                internal static extern uint getUndefinesCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions19getLibraryDirsCountEv")]
                internal static extern uint getLibraryDirsCount_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions15getTargetTripleEv")]
                internal static extern global::System.IntPtr getTargetTriple_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser13ParserOptions15setTargetTripleEPKc")]
                internal static extern void setTargetTriple_0(global::System.IntPtr instance, global::System.IntPtr s);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserOptions>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ParserOptions __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ParserOptions(native.ToPointer(), skipVTables);
            }

            public static ParserOptions __CreateInstance(ParserOptions.Internal native, bool skipVTables = false)
            {
                return new ParserOptions(native, skipVTables);
            }

            private static void* __CopyValue(ParserOptions.Internal native)
            {
                var ret = Marshal.AllocHGlobal(124);
                CppSharp.Parser.ParserOptions.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private ParserOptions(ParserOptions.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ParserOptions(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ParserOptions()
            {
                __Instance = Marshal.AllocHGlobal(124);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public ParserOptions(CppSharp.Parser.ParserOptions _0)
            {
                __Instance = Marshal.AllocHGlobal(124);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                CppSharp.Parser.ParserOptions __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public string getArguments(uint i)
            {
                var __ret = Internal.getArguments_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addArguments(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addArguments_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearArguments()
            {
                Internal.clearArguments_0((__Instance + __PointerAdjustment));
            }

            public string getIncludeDirs(uint i)
            {
                var __ret = Internal.getIncludeDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addIncludeDirs(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addIncludeDirs_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearIncludeDirs()
            {
                Internal.clearIncludeDirs_0((__Instance + __PointerAdjustment));
            }

            public string getSystemIncludeDirs(uint i)
            {
                var __ret = Internal.getSystemIncludeDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addSystemIncludeDirs(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addSystemIncludeDirs_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearSystemIncludeDirs()
            {
                Internal.clearSystemIncludeDirs_0((__Instance + __PointerAdjustment));
            }

            public string getDefines(uint i)
            {
                var __ret = Internal.getDefines_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addDefines(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addDefines_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearDefines()
            {
                Internal.clearDefines_0((__Instance + __PointerAdjustment));
            }

            public string getUndefines(uint i)
            {
                var __ret = Internal.getUndefines_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addUndefines(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addUndefines_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearUndefines()
            {
                Internal.clearUndefines_0((__Instance + __PointerAdjustment));
            }

            public string getLibraryDirs(uint i)
            {
                var __ret = Internal.getLibraryDirs_0((__Instance + __PointerAdjustment), i);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public void addLibraryDirs(string s)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(s);
                Internal.addLibraryDirs_0((__Instance + __PointerAdjustment), arg0);
                Marshal.FreeHGlobal(arg0);
            }

            public void clearLibraryDirs()
            {
                Internal.clearLibraryDirs_0((__Instance + __PointerAdjustment));
            }

            public uint ArgumentsCount
            {
                get
                {
                    var __ret = Internal.getArgumentsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public string FileName
            {
                get
                {
                    var __ret = Internal.getFileName_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(value);
                    Internal.setFileName_0((__Instance + __PointerAdjustment), arg0);
                    Marshal.FreeHGlobal(arg0);
                }
            }

            public uint IncludeDirsCount
            {
                get
                {
                    var __ret = Internal.getIncludeDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint SystemIncludeDirsCount
            {
                get
                {
                    var __ret = Internal.getSystemIncludeDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint DefinesCount
            {
                get
                {
                    var __ret = Internal.getDefinesCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint UndefinesCount
            {
                get
                {
                    var __ret = Internal.getUndefinesCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public uint LibraryDirsCount
            {
                get
                {
                    var __ret = Internal.getLibraryDirsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public string TargetTriple
            {
                get
                {
                    var __ret = Internal.getTargetTriple_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(value);
                    Internal.setTargetTriple_0((__Instance + __PointerAdjustment), arg0);
                    Marshal.FreeHGlobal(arg0);
                }
            }

            public CppSharp.Parser.AST.ASTContext ASTContext
            {
                get
                {
                    CppSharp.Parser.AST.ASTContext __result0;
                    if (((Internal*) __Instance)->ASTContext == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.ASTContext.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->ASTContext))
                        __result0 = (CppSharp.Parser.AST.ASTContext) CppSharp.Parser.AST.ASTContext.NativeToManagedMap[((Internal*) __Instance)->ASTContext];
                    else __result0 = CppSharp.Parser.AST.ASTContext.__CreateInstance(((Internal*) __Instance)->ASTContext);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->ASTContext = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public int ToolSetToUse
            {
                get
                {
                    return ((Internal*) __Instance)->ToolSetToUse;
                }

                set
                {
                    ((Internal*) __Instance)->ToolSetToUse = value;
                }
            }

            public CppSharp.Parser.AST.CppAbi Abi
            {
                get
                {
                    return ((Internal*) __Instance)->Abi;
                }

                set
                {
                    ((Internal*) __Instance)->Abi = value;
                }
            }

            public bool NoStandardIncludes
            {
                get
                {
                    return ((Internal*) __Instance)->NoStandardIncludes != 0;
                }

                set
                {
                    ((Internal*) __Instance)->NoStandardIncludes = (byte) (value ? 1 : 0);
                }
            }

            public bool NoBuiltinIncludes
            {
                get
                {
                    return ((Internal*) __Instance)->NoBuiltinIncludes != 0;
                }

                set
                {
                    ((Internal*) __Instance)->NoBuiltinIncludes = (byte) (value ? 1 : 0);
                }
            }

            public bool MicrosoftMode
            {
                get
                {
                    return ((Internal*) __Instance)->MicrosoftMode != 0;
                }

                set
                {
                    ((Internal*) __Instance)->MicrosoftMode = (byte) (value ? 1 : 0);
                }
            }

            public bool Verbose
            {
                get
                {
                    return ((Internal*) __Instance)->Verbose != 0;
                }

                set
                {
                    ((Internal*) __Instance)->Verbose = (byte) (value ? 1 : 0);
                }
            }

            public CppSharp.Parser.LanguageVersion LanguageVersion
            {
                get
                {
                    return ((Internal*) __Instance)->LanguageVersion;
                }

                set
                {
                    ((Internal*) __Instance)->LanguageVersion = value;
                }
            }

            public CppSharp.Parser.ParserTargetInfo TargetInfo
            {
                get
                {
                    CppSharp.Parser.ParserTargetInfo __result0;
                    if (((Internal*) __Instance)->TargetInfo == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.ParserTargetInfo.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->TargetInfo))
                        __result0 = (CppSharp.Parser.ParserTargetInfo) CppSharp.Parser.ParserTargetInfo.NativeToManagedMap[((Internal*) __Instance)->TargetInfo];
                    else __result0 = CppSharp.Parser.ParserTargetInfo.__CreateInstance(((Internal*) __Instance)->TargetInfo);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->TargetInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public CppSharp.Parser.AbstractModule Module
            {
                get
                {
                    CppSharp.Parser.AbstractModule __result0;
                    if (((Internal*) __Instance)->Module == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AbstractModule.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Module))
                        __result0 = (CppSharp.Parser.AbstractModule) CppSharp.Parser.AbstractModule.NativeToManagedMap[((Internal*) __Instance)->Module];
                    else CppSharp.Parser.AbstractModule.NativeToManagedMap[((Internal*) __Instance)->Module] = __result0 = (CppSharp.Parser.AbstractModule) CppSharp.Parser.AbstractModule.__CreateInstance(((Internal*) __Instance)->Module);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->Module = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class ParserDiagnostic : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 36)]
            public partial struct Internal
            {
                [FieldOffset(24)]
                public CppSharp.Parser.ParserDiagnosticLevel Level;

                [FieldOffset(28)]
                public int LineNumber;

                [FieldOffset(32)]
                public int ColumnNumber;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser16ParserDiagnosticC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser16ParserDiagnosticC2ERKS1_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser16ParserDiagnosticD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser16ParserDiagnostic11getFileNameEv")]
                internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser16ParserDiagnostic11setFileNameEPKc")]
                internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser16ParserDiagnostic10getMessageEv")]
                internal static extern global::System.IntPtr getMessage_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser16ParserDiagnostic10setMessageEPKc")]
                internal static extern void setMessage_0(global::System.IntPtr instance, global::System.IntPtr s);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserDiagnostic> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserDiagnostic>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ParserDiagnostic __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ParserDiagnostic(native.ToPointer(), skipVTables);
            }

            public static ParserDiagnostic __CreateInstance(ParserDiagnostic.Internal native, bool skipVTables = false)
            {
                return new ParserDiagnostic(native, skipVTables);
            }

            private static void* __CopyValue(ParserDiagnostic.Internal native)
            {
                var ret = Marshal.AllocHGlobal(36);
                CppSharp.Parser.ParserDiagnostic.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private ParserDiagnostic(ParserDiagnostic.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ParserDiagnostic(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ParserDiagnostic()
            {
                __Instance = Marshal.AllocHGlobal(36);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public ParserDiagnostic(CppSharp.Parser.ParserDiagnostic _0)
            {
                __Instance = Marshal.AllocHGlobal(36);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                CppSharp.Parser.ParserDiagnostic __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public string FileName
            {
                get
                {
                    var __ret = Internal.getFileName_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(value);
                    Internal.setFileName_0((__Instance + __PointerAdjustment), arg0);
                    Marshal.FreeHGlobal(arg0);
                }
            }

            public string Message
            {
                get
                {
                    var __ret = Internal.getMessage_0((__Instance + __PointerAdjustment));
                    return Marshal.PtrToStringAnsi(__ret);
                }

                set
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(value);
                    Internal.setMessage_0((__Instance + __PointerAdjustment), arg0);
                    Marshal.FreeHGlobal(arg0);
                }
            }

            public CppSharp.Parser.ParserDiagnosticLevel Level
            {
                get
                {
                    return ((Internal*) __Instance)->Level;
                }

                set
                {
                    ((Internal*) __Instance)->Level = value;
                }
            }

            public int LineNumber
            {
                get
                {
                    return ((Internal*) __Instance)->LineNumber;
                }

                set
                {
                    ((Internal*) __Instance)->LineNumber = value;
                }
            }

            public int ColumnNumber
            {
                get
                {
                    return ((Internal*) __Instance)->ColumnNumber;
                }

                set
                {
                    ((Internal*) __Instance)->ColumnNumber = value;
                }
            }
        }

        public unsafe partial class ParserResult : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public CppSharp.Parser.ParserResultKind Kind;

                [FieldOffset(16)]
                public global::System.IntPtr ASTContext;

                [FieldOffset(20)]
                public global::System.IntPtr Library;

                [FieldOffset(24)]
                public global::System.IntPtr CodeParser;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser12ParserResultC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser12ParserResultC2ERKS1_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser12ParserResultD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser12ParserResult14getDiagnosticsEj")]
                internal static extern void getDiagnostics_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser12ParserResult14addDiagnosticsERNS0_16ParserDiagnosticE")]
                internal static extern void addDiagnostics_0(global::System.IntPtr instance, global::System.IntPtr s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser12ParserResult16clearDiagnosticsEv")]
                internal static extern void clearDiagnostics_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser12ParserResult19getDiagnosticsCountEv")]
                internal static extern uint getDiagnosticsCount_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserResult> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ParserResult>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ParserResult __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ParserResult(native.ToPointer(), skipVTables);
            }

            public static ParserResult __CreateInstance(ParserResult.Internal native, bool skipVTables = false)
            {
                return new ParserResult(native, skipVTables);
            }

            private static void* __CopyValue(ParserResult.Internal native)
            {
                var ret = Marshal.AllocHGlobal(28);
                CppSharp.Parser.ParserResult.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private ParserResult(ParserResult.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ParserResult(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ParserResult()
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public ParserResult(CppSharp.Parser.ParserResult _0)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                CppSharp.Parser.ParserResult __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public CppSharp.Parser.ParserDiagnostic getDiagnostics(uint i)
            {
                var __ret = new CppSharp.Parser.ParserDiagnostic.Internal();
                Internal.getDiagnostics_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), i);
                return CppSharp.Parser.ParserDiagnostic.__CreateInstance(__ret);
            }

            public void addDiagnostics(CppSharp.Parser.ParserDiagnostic s)
            {
                if (ReferenceEquals(s, null))
                    throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                var arg0 = s.__Instance;
                Internal.addDiagnostics_0((__Instance + __PointerAdjustment), arg0);
            }

            public void clearDiagnostics()
            {
                Internal.clearDiagnostics_0((__Instance + __PointerAdjustment));
            }

            public uint DiagnosticsCount
            {
                get
                {
                    var __ret = Internal.getDiagnosticsCount_0((__Instance + __PointerAdjustment));
                    return __ret;
                }
            }

            public CppSharp.Parser.ParserResultKind Kind
            {
                get
                {
                    return ((Internal*) __Instance)->Kind;
                }

                set
                {
                    ((Internal*) __Instance)->Kind = value;
                }
            }

            public CppSharp.Parser.AST.ASTContext ASTContext
            {
                get
                {
                    CppSharp.Parser.AST.ASTContext __result0;
                    if (((Internal*) __Instance)->ASTContext == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.ASTContext.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->ASTContext))
                        __result0 = (CppSharp.Parser.AST.ASTContext) CppSharp.Parser.AST.ASTContext.NativeToManagedMap[((Internal*) __Instance)->ASTContext];
                    else __result0 = CppSharp.Parser.AST.ASTContext.__CreateInstance(((Internal*) __Instance)->ASTContext);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->ASTContext = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public CppSharp.Parser.AST.NativeLibrary Library
            {
                get
                {
                    CppSharp.Parser.AST.NativeLibrary __result0;
                    if (((Internal*) __Instance)->Library == IntPtr.Zero) __result0 = null;
                    else if (CppSharp.Parser.AST.NativeLibrary.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Library))
                        __result0 = (CppSharp.Parser.AST.NativeLibrary) CppSharp.Parser.AST.NativeLibrary.NativeToManagedMap[((Internal*) __Instance)->Library];
                    else __result0 = CppSharp.Parser.AST.NativeLibrary.__CreateInstance(((Internal*) __Instance)->Library);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->Library = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class ClangParser : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser11ClangParserC2ERKS1_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser11ClangParser11ParseHeaderEPNS0_13ParserOptionsE")]
                internal static extern global::System.IntPtr ParseHeader_0(global::System.IntPtr Opts);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser11ClangParser12ParseLibraryEPNS0_13ParserOptionsE")]
                internal static extern global::System.IntPtr ParseLibrary_0(global::System.IntPtr Opts);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8CppSharp9CppParser11ClangParser13GetTargetInfoEPNS0_13ParserOptionsE")]
                internal static extern global::System.IntPtr GetTargetInfo_0(global::System.IntPtr Opts);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClangParser> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClangParser>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static ClangParser __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new ClangParser(native.ToPointer(), skipVTables);
            }

            public static ClangParser __CreateInstance(ClangParser.Internal native, bool skipVTables = false)
            {
                return new ClangParser(native, skipVTables);
            }

            private static void* __CopyValue(ClangParser.Internal native)
            {
                var ret = Marshal.AllocHGlobal(0);
                *(ClangParser.Internal*) ret = native;
                return ret.ToPointer();
            }

            private ClangParser(ClangParser.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ClangParser(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public ClangParser()
            {
                __Instance = Marshal.AllocHGlobal(0);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public ClangParser(CppSharp.Parser.ClangParser _0)
            {
                __Instance = Marshal.AllocHGlobal(0);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((ClangParser.Internal*) __Instance) = *((ClangParser.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                CppSharp.Parser.ClangParser __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static CppSharp.Parser.ParserResult ParseHeader(CppSharp.Parser.ParserOptions Opts)
            {
                var arg0 = ReferenceEquals(Opts, null) ? global::System.IntPtr.Zero : Opts.__Instance;
                var __ret = Internal.ParseHeader_0(arg0);
                CppSharp.Parser.ParserResult __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (CppSharp.Parser.ParserResult.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (CppSharp.Parser.ParserResult) CppSharp.Parser.ParserResult.NativeToManagedMap[__ret];
                else __result0 = CppSharp.Parser.ParserResult.__CreateInstance(__ret);
                return __result0;
            }

            public static CppSharp.Parser.ParserResult ParseLibrary(CppSharp.Parser.ParserOptions Opts)
            {
                var arg0 = ReferenceEquals(Opts, null) ? global::System.IntPtr.Zero : Opts.__Instance;
                var __ret = Internal.ParseLibrary_0(arg0);
                CppSharp.Parser.ParserResult __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (CppSharp.Parser.ParserResult.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (CppSharp.Parser.ParserResult) CppSharp.Parser.ParserResult.NativeToManagedMap[__ret];
                else __result0 = CppSharp.Parser.ParserResult.__CreateInstance(__ret);
                return __result0;
            }

            public static CppSharp.Parser.ParserTargetInfo GetTargetInfo(CppSharp.Parser.ParserOptions Opts)
            {
                var arg0 = ReferenceEquals(Opts, null) ? global::System.IntPtr.Zero : Opts.__Instance;
                var __ret = Internal.GetTargetInfo_0(arg0);
                CppSharp.Parser.ParserTargetInfo __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (CppSharp.Parser.ParserTargetInfo.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (CppSharp.Parser.ParserTargetInfo) CppSharp.Parser.ParserTargetInfo.NativeToManagedMap[__ret];
                else __result0 = CppSharp.Parser.ParserTargetInfo.__CreateInstance(__ret);
                return __result0;
            }
        }

        internal unsafe partial class AbstractModuleInternal : CppSharp.Parser.AbstractModule, IDisposable
        {
            private static void* __CopyValue(AbstractModule.Internal native)
            {
                var ret = Marshal.AllocHGlobal(52);
                *(AbstractModule.Internal*) ret = native;
                return ret.ToPointer();
            }

            internal AbstractModuleInternal(AbstractModule.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            internal AbstractModuleInternal(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                __Instance = new global::System.IntPtr(native);
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            }
        }
    }
}
