// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Wrappers {
    using System;
    using System.Runtime.InteropServices;
    using Mono.VisualC.Interop;
    
    public class QCalendarWidget : QWidget {
        private static IQCalendarWidget impl = Wrappers.Libs.Lib.GetClass <IQCalendarWidget, _QCalendarWidget, QCalendarWidget>("QCalendarWidget");
        public QCalendarWidget(QWidget parent) {
            impl.QCalendarWidget(this.Native, parent);
        }
        public QDate SelectedDate {
            get {
                return impl.selectedDate(this.Native);
            }
            set {
                impl.setSelectedDate(this.Native, value);
            }
        }
        public int YearShown {
            get {
                return impl.yearShown(this.Native);
            }
        }
        public int MonthShown {
            get {
                return impl.monthShown(this.Native);
            }
        }
        public QDate MinimumDate {
            get {
                return impl.minimumDate(this.Native);
            }
            set {
                impl.setMinimumDate(this.Native, value);
            }
        }
        public QDate MaximumDate {
            get {
                return impl.maximumDate(this.Native);
            }
            set {
                impl.setMaximumDate(this.Native, value);
            }
        }
        public DayOfWeek FirstDayOfWeek {
            get {
                return impl.firstDayOfWeek(this.Native);
            }
            set {
                impl.setFirstDayOfWeek(this.Native, value);
            }
        }
        public bool IsHeaderVisible {
            get {
                return impl.isHeaderVisible(this.Native);
            }
        }
        public bool IsGridVisible {
            get {
                return impl.isGridVisible(this.Native);
            }
        }
        public SelectionMode SelectionMode {
            get {
                return impl.selectionMode(this.Native);
            }
            set {
                impl.setSelectionMode(this.Native, value);
            }
        }
        public HorizontalHeaderFormat HorizontalHeaderFormat {
            get {
                return impl.horizontalHeaderFormat(this.Native);
            }
            set {
                impl.setHorizontalHeaderFormat(this.Native, value);
            }
        }
        public VerticalHeaderFormat VerticalHeaderFormat {
            get {
                return impl.verticalHeaderFormat(this.Native);
            }
            set {
                impl.setVerticalHeaderFormat(this.Native, value);
            }
        }
        public QTextCharFormat HeaderTextFormat {
            get {
                return impl.headerTextFormat(this.Native);
            }
            set {
                impl.setHeaderTextFormat(this.Native, value);
            }
        }
        public bool IsDateEditEnabled {
            get {
                return impl.isDateEditEnabled(this.Native);
            }
        }
        public int DateEditAcceptDelay {
            get {
                return impl.dateEditAcceptDelay(this.Native);
            }
            set {
                impl.setDateEditAcceptDelay(this.Native, value);
            }
        }
        public override void Dispose() {
        }
        public void SetHeaderVisible(bool show) {
            impl.setHeaderVisible(this.Native, show);
        }
        public QTextCharFormat WeekdayTextFormat(DayOfWeek dayOfWeek) {
            return impl.weekdayTextFormat(this.Native, dayOfWeek);
        }
        public void SetWeekdayTextFormat(DayOfWeek dayOfWeek, QTextCharFormat format) {
            impl.setWeekdayTextFormat(this.Native, dayOfWeek, format);
        }
        public QMap<QDate, QTextCharFormat> DateTextFormat() {
            return impl.dateTextFormat(this.Native);
        }
        public QTextCharFormat DateTextFormat(QDate date) {
            return impl.dateTextFormat(this.Native, date);
        }
        public void SetDateTextFormat(QDate date, QTextCharFormat format) {
            impl.setDateTextFormat(this.Native, date, format);
        }
        public void SetDateEditEnabled(bool enable) {
            impl.setDateEditEnabled(this.Native, enable);
        }
        public void SetDateRange(QDate min, QDate max) {
            impl.setDateRange(this.Native, min, max);
        }
        public void SetCurrentPage(int year, int month) {
            impl.setCurrentPage(this.Native, year, month);
        }
        public void SetGridVisible(bool show) {
            impl.setGridVisible(this.Native, show);
        }
        public void SetNavigationBarVisible(bool visible) {
            impl.setNavigationBarVisible(this.Native, visible);
        }
        public void ShowNextMonth() {
            impl.showNextMonth(this.Native);
        }
        public void ShowPreviousMonth() {
            impl.showPreviousMonth(this.Native);
        }
        public void ShowNextYear() {
            impl.showNextYear(this.Native);
        }
        public void ShowPreviousYear() {
            impl.showPreviousYear(this.Native);
        }
        public void ShowSelectedDate() {
            impl.showSelectedDate(this.Native);
        }
        public void ShowToday() {
            impl.showToday(this.Native);
        }
        public interface IQCalendarWidget : ICppClassOverridable<QCalendarWidget> {
            [Constructor()]
            void QCalendarWidget(CppInstancePtr @this, [MangleAs("class QWidget *")] QWidget parent);
            [Virtual()]
            [Destructor()]
            void Destruct(CppInstancePtr @this);
            [Const()]
            QDate selectedDate(CppInstancePtr @this);
            void setSelectedDate(CppInstancePtr @this, [MangleAs("class QDate const &")] QDate value);
            [Const()]
            int yearShown(CppInstancePtr @this);
            [Const()]
            int monthShown(CppInstancePtr @this);
            [Const()]
            QDate minimumDate(CppInstancePtr @this);
            void setMinimumDate(CppInstancePtr @this, [MangleAs("class QDate const &")] QDate value);
            [Const()]
            QDate maximumDate(CppInstancePtr @this);
            void setMaximumDate(CppInstancePtr @this, [MangleAs("class QDate const &")] QDate value);
            [Const()]
            DayOfWeek firstDayOfWeek(CppInstancePtr @this);
            void setFirstDayOfWeek(CppInstancePtr @this, [MangleAs("enum DayOfWeek")] DayOfWeek value);
            [Const()]
            bool isHeaderVisible(CppInstancePtr @this);
            void setHeaderVisible(CppInstancePtr @this, [MangleAs("bool")] bool show);
            [Const()]
            bool isGridVisible(CppInstancePtr @this);
            [Const()]
            SelectionMode selectionMode(CppInstancePtr @this);
            void setSelectionMode(CppInstancePtr @this, [MangleAs("enum SelectionMode")] SelectionMode value);
            [Const()]
            HorizontalHeaderFormat horizontalHeaderFormat(CppInstancePtr @this);
            void setHorizontalHeaderFormat(CppInstancePtr @this, [MangleAs("enum HorizontalHeaderFormat")] HorizontalHeaderFormat value);
            [Const()]
            VerticalHeaderFormat verticalHeaderFormat(CppInstancePtr @this);
            void setVerticalHeaderFormat(CppInstancePtr @this, [MangleAs("enum VerticalHeaderFormat")] VerticalHeaderFormat value);
            [Const()]
            QTextCharFormat headerTextFormat(CppInstancePtr @this);
            void setHeaderTextFormat(CppInstancePtr @this, [MangleAs("class QTextCharFormat const &")] QTextCharFormat value);
            [Const()]
            QTextCharFormat weekdayTextFormat(CppInstancePtr @this, [MangleAs("enum DayOfWeek")] DayOfWeek dayOfWeek);
            void setWeekdayTextFormat(CppInstancePtr @this, [MangleAs("enum DayOfWeek")] DayOfWeek dayOfWeek, [MangleAs("class QTextCharFormat const &")] QTextCharFormat format);
            [Const()]
            QMap<QDate, QTextCharFormat> dateTextFormat(CppInstancePtr @this);
            [Const()]
            QTextCharFormat dateTextFormat(CppInstancePtr @this, [MangleAs("class QDate const &")] QDate date);
            void setDateTextFormat(CppInstancePtr @this, [MangleAs("class QDate const &")] QDate date, [MangleAs("class QTextCharFormat const &")] QTextCharFormat format);
            [Const()]
            bool isDateEditEnabled(CppInstancePtr @this);
            void setDateEditEnabled(CppInstancePtr @this, [MangleAs("bool")] bool enable);
            [Const()]
            int dateEditAcceptDelay(CppInstancePtr @this);
            void setDateEditAcceptDelay(CppInstancePtr @this, [MangleAs("int")] int value);
            void setDateRange(CppInstancePtr @this, [MangleAs("class QDate const &")] QDate min, [MangleAs("class QDate const &")] QDate max);
            void setCurrentPage(CppInstancePtr @this, [MangleAs("int")] int year, [MangleAs("int")] int month);
            void setGridVisible(CppInstancePtr @this, [MangleAs("bool")] bool show);
            void setNavigationBarVisible(CppInstancePtr @this, [MangleAs("bool")] bool visible);
            void showNextMonth(CppInstancePtr @this);
            void showPreviousMonth(CppInstancePtr @this);
            void showNextYear(CppInstancePtr @this);
            void showPreviousYear(CppInstancePtr @this);
            void showSelectedDate(CppInstancePtr @this);
            void showToday(CppInstancePtr @this);
        }
        private struct _QCalendarWidget {
        }
    }
}
