// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Wrappers {
    using System;
    using System.Runtime.InteropServices;
    using Mono.VisualC.Interop;
    
    public class QProcessEnvironment : ICppObject {
        protected CppInstancePtr native_ptr;
        private static IQProcessEnvironment impl = Wrappers.Libs.Lib.GetClass <IQProcessEnvironment, _QProcessEnvironment, QProcessEnvironment>("QProcessEnvironment");
        public QProcessEnvironment() {
            impl.QProcessEnvironment(this.Native);
        }
        public QProcessEnvironment(QProcessEnvironment other) {
            impl.QProcessEnvironment(this.Native, other);
        }
        public CppInstancePtr Native {
            get {
                return this.native_ptr;
            }
        }
        public bool IsEmpty {
            get {
                return impl.isEmpty(this.Native);
            }
        }
        public QStringList ToStringList {
            get {
                return impl.toStringList(this.Native);
            }
        }
        public virtual void Dispose() {
        }
        public void Clear() {
            impl.clear(this.Native);
        }
        public bool Contains(QString name) {
            return impl.contains(this.Native, name);
        }
        public void Insert(QString name, QString value) {
            impl.insert(this.Native, name, value);
        }
        public void Remove(QString name) {
            impl.remove(this.Native, name);
        }
        public QString Value(QString name, QString defaultValue) {
            return impl.value(this.Native, name, defaultValue);
        }
        public static QProcessEnvironment SystemEnvironment() {
            return impl.systemEnvironment();
        }
        public interface IQProcessEnvironment : ICppClassOverridable<QProcessEnvironment> {
            [Constructor()]
            void QProcessEnvironment(CppInstancePtr @this);
            [Constructor()]
            void QProcessEnvironment(CppInstancePtr @this, [MangleAs("class QProcessEnvironment const &")] QProcessEnvironment other);
            [Destructor()]
            void Destruct(CppInstancePtr @this);
            [Const()]
            bool isEmpty(CppInstancePtr @this);
            void clear(CppInstancePtr @this);
            [Const()]
            bool contains(CppInstancePtr @this, [MangleAs("class QString const &")] QString name);
            void insert(CppInstancePtr @this, [MangleAs("class QString const &")] QString name, [MangleAs("class QString const &")] QString value);
            void remove(CppInstancePtr @this, [MangleAs("class QString const &")] QString name);
            [Const()]
            QString value(CppInstancePtr @this, [MangleAs("class QString const &")] QString name, [MangleAs("class QString const &")] QString defaultValue);
            [Const()]
            QStringList toStringList(CppInstancePtr @this);
            [Static()]
            QProcessEnvironment systemEnvironment();
        }
        private struct _QProcessEnvironment {
            // FIXME: Unknown type "class QSharedDataPointer <QProcessEnvironmentPrivate>" for field "d." Assuming IntPtr.
            private System.IntPtr d;
        }
    }
}
